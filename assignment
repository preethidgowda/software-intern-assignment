import os

class FileSystem:
    def _init_(self):
        self.current_directory = '/'
        self.file_system = {}

    def mkdir(self, directory_name):
        new_directory_path = os.path.join(self.current_directory, directory_name)
        self.file_system[new_directory_path] = {}
        
    def cd(self, path):
        if path == '/':
            self.current_directory = '/'
        else:
            new_path = os.path.normpath(os.path.join(self.current_directory, path))
            if new_path in self.file_system and isinstance(self.file_system[new_path], dict):
                self.current_directory = new_path
            else:
                print(f"Error: Directory '{path}' not found.")

    def ls(self, path='.'):
        target_path = os.path.normpath(os.path.join(self.current_directory, path))
        if target_path in self.file_system and isinstance(self.file_system[target_path], dict):
            return list(self.file_system[target_path].keys())
        else:
            print(f"Error: Directory '{path}' not found.")

    def touch(self, file_name):
        file_path = os.path.join(self.current_directory, file_name)
        self.file_system[file_path] = ""

    def echo(self, text, file_name):
        file_path = os.path.join(self.current_directory, file_name)
        if file_path in self.file_system and isinstance(self.file_system[file_path], str):
            self.file_system[file_path] = text
        else:
            print(f"Error: File '{file_name}' not found.")

    def mv(self, source_path, destination_path):
        source_path = os.path.normpath(os.path.join(self.current_directory, source_path))
        destination_path = os.path.normpath(os.path.join(self.current_directory, destination_path))
        
        if source_path in self.file_system:
            self.file_system[destination_path] = self.file_system.pop(source_path)
        else:
            print(f"Error: Source '{source_path}' not found.")

    def cp(self, source_path, destination_path):
        source_path = os.path.normpath(os.path.join(self.current_directory, source_path))
        destination_path = os.path.normpath(os.path.join(self.current_directory, destination_path))
        
        if source_path in self.file_system:
            self.file_system[destination_path] = self.file_system[source_path]
        else:
            print(f"Error: Source '{source_path}' not found.")

    def rm(self, path):
        file_path = os.path.normpath(os.path.join(self.current_directory, path))
        if file_path in self.file_system:
            self.file_system.pop(file_path)
        else:
            print(f"Error: '{path}' not found.")

# Example usage:
file_system = FileSystem()

while True:
    command = input("Enter command: ").split(' ')
    operation = command[0]

    if operation == 'exit':
        break
    elif operation == 'mkdir':
        file_system.mkdir(command[1])
    elif operation == 'cd':
        file_system.cd(command[1])
    elif operation == 'ls':
        print(file_system.ls(command[1]))
    elif operation == 'touch':
        file_system.touch(command[1])
    elif operation == 'echo':
        file_system.echo(' '.join(command[2:]), command[1])
    elif operation == 'mv':
        file_system.mv(command[1], command[2])
    elif operation == 'cp':
        file_system.cp(command[1], command[2])
    elif operation == 'rm':
        file_system.rm(command[1])
    else:
        print("Invalid command. Try again.")

print("Exiting file system.")
